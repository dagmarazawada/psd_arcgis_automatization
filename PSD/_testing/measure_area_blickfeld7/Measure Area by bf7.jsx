//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//+++++++++++++++++++++++++++++ Photoshop CS5 Measurement to Excel ++++++++++++++++++++++++++++++++++++++++//++++++ Description:This script measures the pixel area from a selection and stores the results in a list. ++++++++++++++//++++++++++++++++++ The complete list can be exported to a *.csv Excel-file. ++++++++++++++++++++++++++++++++++++//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//++++++++++++++++++++++++++++ Author and Copyright: Florian Frank ++++++++++++++++++++++++++++++++++++++++++//++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//+++++++++++++++++++++++++++++++ for any suggestions or questions: ++++++++++++++++++++++++++++++++++++++++++//++++++++++++++++++++++++++++++++++ http://www.blickfeld7.com +++++++++++++++++++++++++++++++++++++++++++++//++++++++++++++++++++++++++++++++++++ florian@blickfeld7.com ++++++++++++++++++++++++++++++++++++++++++++++//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//+++++++++++           Version 1.1 on Oct. 17, 2012 bugfix for CS6 & support for german version        +++++++++++++++++//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++var s_path =  app.path + '/' + localize("$$$/ScriptingSupport/InstalledScripts=Presets/Scripts")+"/measure_area_blickfeld7/save_button.png";var dpoints = ["Label","Area","ScaleUnits","Count","ScaleFactor"];var mtitle = false;var originalUnit = preferences.rulerUnits;var doc, win;var offset = ($.os.search(/Win/) != -1)?2:1;preferences.rulerUnits = Units.PIXELS;app.displayDialogs = DialogModes.NO;// +++++++++++++++++++++++++++++++++++++++ LOG CLASS START +++++++++++++++++++++++++++++++++++++++var logs = function(){    this.dpath;     //Document path    this.path;       //Logfolder path    this.count = 0;     //Logfiles count    this.filename = "meas_backup_";    this.filenumber = 0;    this.selection = false;    this.document = false;    this.folder = false;    this.files;    this.mlist = new Object();    this.mlist.Counter = 0;    this.mlist.filenumber = [];    this.mlist.Title = [];    this.mlist.Area = [];    this.mlist.ScaleU = [];    this.mlist.Count = [];    this.mlist.ScaleF = [];///////////// DOCUMENT CHECK ///////////    this.docCheck = function(){        if (app.documents.length == 0){            this.document = false;            var open = confirm("Warning: No file to progress.\r\nDo you want to open an existing file in Photoshop?");            if(open){                var files = app.openDialog();                app.open(files[0]);                this.dpath = app.activeDocument.path;                doc = app.activeDocument;                this.mScale();                return true;            }else{                alert("Warning: No open document.\r\nPlease open a document and make a selection in order to run this command.");                return false;            }        }else{            this.document=true;            this.dpath = app.activeDocument.path;            doc = app.activeDocument;            this.path =   this.dpath+"/measurement_logs";            this.mScale();            return true;        }    }    this.mScale = function(){        win.p3.ss.ssave.image =  ScriptUI.newImage ( File(s_path) );        var ds = doc.measurementScale;        win.p3.name.text = ds.name;//ds.logicalLength +" "+ds.logicalUnits+" name: "+ds.name+" Pixel: "+ds.pixelLength;        win.p3.ss.pixel.text = ds.pixelLength;        win.p3.ss.loglen.text = ds.logicalLength;        win.p3.ss.units.text = ds.logicalUnits;        } //////////// FOLDER CHECK ////////////////    this.fCreate = function(){        if(this.docCheck()){            var f = new Folder (this.dpath);            if(f.exists){                var logf = new Folder(this.path);                if(logf.exists){                    this.Counter();                    return true;                }else{                    if(logf.create()){                        status("New log folder successfully created.");                        this.Counter();                        return true;                        }                    else {                        status("Error on creating new log folder.");                        return false;                        }                    }            }else{                status("Error on accessing document folder in order to create logfiles.");                return false;            }           }else{            status("Logfolder could not be created. Please open a document!");        }    }//////////// SELECTION CHECK ///////////    this.sCheck = function (){        var res = false;        if(this.docCheck()){            var as = app.activeDocument.activeHistoryState;            app.activeDocument.selection.deselect();            if (as != app.activeDocument.activeHistoryState)            {                res = true;                app.activeDocument.activeHistoryState = as;            }        if(!res){            status("Warning: Make a selection in order to make/save a measurement.");            win.p2.btn.admes.enabled = false;            win.p2.btn.name.enabled = false;            }        }        return res;    } //////////// NAME CHECK /////////////////    this.nCheck = function(){        var title = win.p2.btn.name.text;        if (mtitle && title != ""){            var regular = true;            var mask="ABCDEFGHIJKLMNOPQRSTUVWXYZÖÄÜßabcdefghijklmnopqrstuvwxyzöäü_?!.%,&0123456789";                for (var i=0;i<title.length;i++)                    {                        if (mask.indexOf(title.charAt(i))<0)                            {                                regular = false;                            }                    }                if(regular){                    return true;                    }                else{                    alert("Warning: Some of the characters in your title/description are not allowed!\r\n Please just use regular characters, numbers or _ ? ! . % , & and no Spaces");                    false;                }         } else{                    alert("Please type a title for this measurement into the textfield next to the Add... button.");                    return false;         }        }//////////// COUNT LOGFILE /////////////    this.Counter= function(){            var p = new Folder(this.path);            var files = p.getFiles(this.filename+"*.txt");            if(files.length>0){                status(files.length+1+" measurements listed.");                this.count = files.length;             }            else this.count = 0;            return this.count;    }//////////// WRITE LOGFILE /////////////    this.log = function(){        if(this.nCheck()){            if(this.sCheck()){                if(this.fCreate()){                app.preferences.rulerUnits = Units.PIXELS;                app.measurementLog.deleteMeasurements (MeasurementRange.ALLMEASUREMENTS);                app.activeDocument.recordMeasurements(MeasurementSource.MEASURESELECTION,dpoints);                this.count = this.count + 1;                var f = new File(this.path+"/"+this.filename+(this.filenumber+1)+".txt");                var data = '"'+win.p2.btn.name.text+'"\r\n';                  app.measurementLog.exportMeasurements (f, MeasurementRange.ALLMEASUREMENTS,dpoints);                  app.measurementLog.deleteMeasurements (MeasurementRange.ALLMEASUREMENTS);                  app.preferences.rulerUnits = originalUnit;                if(f.open("e","TEXT","ttxt")){                    f.seek(0,2);                    f.write(data);                    f.close();                    this.makeList();                    status("Measurement successfully written to logfile.");                    return true;                 }else{                      alert("Error on making logfile.");                      status("Warning: No write access to of this photoshop file folder.");                      return false;                 }                }else return false;            }else{                             alert("Warning: No selection to measure.\r\nClose this window make a selection first and run this command again.");                return false;            }        }else{            status("Warning: No title/description to save measurement.");            return false;        }    }       //////////// READ LOGS //////////////////    this.read = function(){        var p = new Folder(this.path);        this.files = p.getFiles(this.filename+"*.txt");                if(this.files.length > 0){            status(this.files.length+" measurements listed.");            this.mlist.Counter = 0;            this.mlist.filenumber = [];            this.mlist.Title = [];            this.mlist.Area = [];            this.mlist.ScaleU = [];            this.mlist.Count = [];            this.mlist.ScaleF = [];            var lastfile = /meas_backup_[0-9]+/.exec(this.files[this.files.length-1]);            this.filenumber = parseInt(/[0-9]+/.exec(lastfile));            stator = false;                        for(var i=0; i < this.files.length; i++){                var f = new File(this.files[i]);                if(f.open("r","TEXT","ttxt")) {                    f.seek(0);                    var linePos = [];                    var out;                    var it=0;                                        do{                        var line = f.readln();                        linePos[it]=line.length+offset;                        it++;                    } while(f.tell()< f.length);                                       f.seek(0);                    for(var iz = 0; iz< linePos.length; iz++){                        var line =  f.read(linePos[iz]);                                                // Skip title bar and feature measurements of logfile                        // keywords for various language versions of photoshop                        var RegEx = /-|Area|Beschriftung/;                        if(line.search(RegEx)==-1){                                                       // keywords for various language versions of photoshop                           line = line.replace(/Measurement [0-9]+/, "");                           line = line.replace(/Messung [0-9]+/, "");                                                      var lineArray = line.match(/[0-9]+,[0-9]+|[0-9]*[A-Z]*[a-z]+[äöüÖÄÜ_?!.%,&ß]*[0-9]*[A-Z]*[a-z]*|[A-Z]+|[0-9]+/g);                           if(iz == linePos.length -1 ){                               this.mlist.Title[i] = lineArray[0];                               stator = true;                           }else{                               var lastfile = /meas_backup_[0-9]+/.exec(this.files[i]);                               this.mlist.filenumber[i] = parseInt(/[0-9]+/.exec(lastfile));                               this.mlist.Area[i] = lineArray[0];                               this.mlist.ScaleU[i] = lineArray[1];                               this.mlist.Count[i] = lineArray[2];                               this.mlist.ScaleF[i] = lineArray[3];                               this.mlist.Counter++;                          }                        }                    }                } else status("No read permisssion on file "+this.filename+i+".txt.");            }            return status;        }else return false;    }//////////// MAKE LIST //////////////////    this.makeList = function(){        this.read();        if(win.p2.gp.meslist.items.length>0){            win.p2.gp.meslist.removeAll();        }                for (var i = 0; i< this.mlist.Counter; i++){            var e = win.p2.gp.meslist.add("item", String(this.mlist.Title[i]));            e.subItems[0].text= this.mlist.Area[i];            e.subItems[1].text= this.mlist.ScaleU[i];            e.subItems[2].text= this.mlist.Count[i];            e.subItems[3].text= this.mlist.ScaleF[i];        }    }//////////// EXPORT To EXCEL //////////    this.expo = function(){        var ex = "Description; Area; Scale Units; Item Count; Scale Factor\r\n";        for(var i = 0; i < this.mlist.Counter; i++){            ex += this.mlist.Title[i]+"; "+this.mlist.Area[i]+"; "+this.mlist.ScaleU[i]+"; "+this.mlist.Count[i]+"; "+this.mlist.ScaleF[i]+"\r\n";        }        return ex;    }//////////// MAIN //////////////////////   this.selection = this.sCheck();   this.makeList();}//+++++++++++++++++++++++++++++++++++++++++ LOG CLASS END ++++++++++++++++++++++++++++++++++++++++//List columnsvar columns = function(){    this.str = new String("'");    this.lng = dpoints.length;    for(var i = 0; i <dpoints.length;i++){        this.str = this.str.concat(String(dpoints[i]));        if(i !=dpoints.length-1) this.str+= "', '";        else this.str+="'";        }    }var c = new columns();//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++ USER INTERFACE +++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++//MAiN WINDOWvar maine = "dialog { text: 'Measure Area to Excel', borderless:true, properties: { sulPanelCoordinates:true }, \    p2: Panel { text: 'Measurements List', orientation: 'column', alignment: 'fill', alignChildren: ['left','top'],  \        btn:Group{orientation:'row', alignment:'right', \            name: EditText {text: 'Measurements title/description', alignment: 'left', preferredSize:[300, 20]},\            admes: Button {text: 'Add...', alignment:'right'},\            rem: Button {text: 'Clear', alignment:'left'},\            },\        gp: Group { orientaion: 'column', alignment:'fill',alignChildren: ['left','top'], \            meslist: ListBox {preferredSize: [500, 400], alignment:'bottom', properties: { showHeaders:true, columnTitles:["+c.str+"], numberOfColumns:"+c.lng+"}  }, \        },  \     }, \    p3:Panel{text:'Set Scale',orientation:'row',alignment:'fill',alignChildren:['left','top'],\        n1:StaticText{text:'Name:'},\        name:EditText{text:'Scale 1:1', size:[80,20]},\        ss:Group{margins:[80,0,0,0],\            pixel:EditText{text:'pixel', size:[60,20]},\            p1:StaticText{text:'px'},\            d:StaticText{text:'= '},\            loglen:EditText{text:'1', size:[60,20]},\            units:EditText{text:'units', size:[60,20]},\            ssave:IconButton{size:[22,22]},\        }}\    p1: Panel { text: 'Status', orientation: 'column', alignment: 'fill', alignChildren: ['left','top'],  \        status: StaticText {text: 'Plugin started...', preferredSize:[500,70], properties:{multiline:true, scrolling:true}},  \     }, \     info:StaticText{text:'Author and copyright: Florian Frank. For any suggestions or feedback please contact florian@blickfeld7.com or read the instructions on www.blickfeld7.com/architecture/photoshop/measure_area.html',\     preferredSize:[500,30], justify:'center', alignment:'bottom', properties:{multiline:true, scrolling:false}},\     btn: Group { orientaion: 'row', alignment:'right',\         ex: Button {text: 'Export...' },\         close: Button {text: 'Close' },\     },  \}";win=new Window(maine);var font = ScriptUI.newFont(win.info.graphics.font.name,0,10);win.info.graphics.font = font;var mlog = new logs();//STATUS UPDATEfunction status(str){    win.p1.status.text = str+"\r\n"+win.p1.status.text;}//TITLE Resetterfunction setTitle(){    if(!mtitle){        win.p2.btn.name.text="";        mtitle = true;    } }//MAIN WINDOW Export Buttonwin.btn.ex.onClick  = function(){    var clear  = confirm("Delete logfiles?\r\nWarning: If you delete your logfiles you will loose all your measurements after this export. Don't delete them if you want to work with this list of measurements in the future. ", false);    var f = new File(mlog.dpath+"/measurements.csv").saveDlg();    if(f != null){        if (f.open("w")){                if(f.write(mlog.expo())){                    f.close();                     status("Measurements exported to "+f.displayName);                    if (clear ){                        for(var z = 0; z < mlog.files.length; z++){                            var g = new Folder(mlog.files[z]);                            g.remove();                        }                        var folder= new Folder (mlog.path);                        folder.remove();                        win.close();                        status("All logfiles deleted.");                   }                 }else{                    alert("Writing Measurements to file was not successful.");                 }         }else{             alert("File is not accessible. Check for policies or choose anoter file.");         }     }}//MAIN WINDOW Add Buttonwin.p2.btn.admes.onClick  = function(){    if(mlog==null) mlog=new logs();    mlog.log();}//MAIN WINDOW Remove Buttonwin.p2.btn.rem.onClick  = function(){            if(confirm("Delete selected Measurement?")){        for(var o =0; o < win.p2.gp.meslist.items.length; o++){            if(win.p2.gp.meslist.items[o].selected){                var f = new File(mlog.files[o]);                if(f.exists){                    if(f.remove()){                        win.p2.gp.meslist.remove(o);                        status("Measurement deleted successful.");                    }else{                    alert("ERROR on deleting Logfile. Please make sure you have Read/Write permission to the documents Folder.");                    }                }else{                    status("ERROR: Logfile does not exist.");               }                mlog.makeList();            }        }    }}//MAIN WINDOW Scale Savewin.p3.ss.ssave.onClick = function(){    doc.measurementScale.name = win.p3.name.text;    doc.measurementScale.pixelLength = win.p3.ss.pixel.text;    doc.measurementScale.logicalLength = win.p3.ss.loglen.text;    doc.measurementScale.logicalUnits = win.p3.ss.units.text;    }//MAIN WINDOW Close Buttonwin.btn.close.onClick=function(){    win.close();    }//Event Listenerwin.p2.btn.name.addEventListener ("click", setTitle);/////////////////START application///////////////if(mlog.document)win.show();